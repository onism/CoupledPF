CpGislands.gr1 <- track(query, asRangedData = FALSE)
genome(CpGislands.gr) <- NA
CpGislands.gr <-suppressWarnings(resize(CpGislands.gr, 5000, fix="center"))
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rtracklayer")
genome(session) <- "hg19"
session <- browserSession()
genome(session) <- "hg19"
session <- browserSession()
library(rtracklayer)
install.packages('PSF')
install.packages('~/Downloads/PSF/')
install.packages('~/Downloads/PSF 2/')
install.packages('~/Downloads/PSF/')
install.packages('~/Downloads/PSF/')
version
install.packages('PSF')
install.packages('~/Downloads/PSF/',type='source')
install.packages("PSF", repos = "https://cran.r-project.org/", type="source")
library(PSF)
a <- psf(data = nottem, n.ahead = 12)
a
data = nottem
data(1)
data[1,:]
data[1,]
size(data)
psf_plot(data = nottem, predictions = a$predictions)
print(data)
install.packages('xts')
install.packages('xts')
install.packages('timeDate')
price<-read.csv('DATA200601_QLD1.csv')
price<-read.csv('DATA200601_QLD1.csv')
price<-read.csv('DATA200601_QLD1.csv')
price<-read.csv('/Users/junjie/Desktop/FirstYearDoctor/wind_speed201608/cluster/Rscipt/DATA200601_QLD1.csv')
View(price)
price.xts<-xts(price[,'RRP'],timeDate(price[,1]))
require(xts)
require(timeDate)
price.xts<-xts(price[,'RRP'],timeDate(price[,1]))
xts(price[,'RRP'],timeDate(price[,1]))
price.xts<-xts(price[,'RRP'],timeDate(price[,2]))
View(price.xts)
help(ts)
print( ts(1:10, frequency = 7, start = c(12, 2)), calendar = TRUE)
print( ts(1:10, frequency = 7, start = 2010, calendar = TRUE)
print( ts(1:10, frequency = 7, start = 10, calendar = TRUE)
gnp <- ts(cumsum(1 + round(rnorm(100), 2)),
start = c(1954, 7), frequency = 12)
plot(gnp)
len(data.xs)
length(price.xts)
hour_odd <- c(1:length(price.xts))[c(T,F)]
hour_odd <- c(1:length(price.xts))[c(F,T)]
price.xts<-price.xts[hour_odd]
length(price.xts)
744/24
price.matrix<-matrix(price.xts, nrow = 31, byrow = TRUE)
price.matrix<-matrix(price.xts, nrow = 31, byrow = FALSE)
View(price.matrix)
price.matrix<-matrix(price.xts, nrow = 31, byrow = TRUE)
a <- psf(data = price.matrix, n.ahead = 31)
library(PSF)
a <- psf(data = price.matrix, n.ahead = 31)
length(data)
print data
print(data)
a <- psf(data = price.xts, n.ahead = 24)
psf_plot(data = nottem, predictions = a$predictions)
psf_plot(data = price.xts, predictions = a$predictions)
a
View(price)
plot(price.xts[744-24:744])
plot(a)
plot([744-24:744],a$predictions)
plot(a$predictions)
wind<-read.csv('/Users/junjie/Desktop/FirstYearDoctor/wind_speed201608/data/Blandford2009.dat')
View(wind)
View(wind)
wind<-read.csv('/Users/junjie/Desktop/FirstYearDoctor/wind_speed201608/data/Blandford2009.dat')
wind<-read.csv('/Users/junjie/Desktop/FirstYearDoctor/wind_speed201608/data/41004h2011.csv')
wind.xts<-xts(wind[,'WSPD'],timeDate(wind[,1]))
org.data.xts<-wind.xts['2011-01-01/2011-01-31']
require(xts)
require(timeDate)
wind.xts<-xts(wind[,'WSPD'],timeDate(wind[,1]))
org.data.xts<-wind.xts['2011-01-01/2011-01-31']
View(wind.xts)
View(wind.xts)
View(org.data.xts)
a <- psf(data = org.data.xts, n.ahead = 24)
wind_month.xts<-org.data.xts[,2]
wind_month.xts<-org.data.xts[,1]
View(wind_month.xts)
View(wind_month.xts)
View(wind.xts)
View(wind.xts)
wind_month.xts<-ts(org.data.xts)
a <- psf(data = wind_month.xts, n.ahead = 24)
psf_plot(data = wind_month.xts, predictions = a$predictions)
a
wind<-read.csv('/Users/junjie/Desktop/FirstYearDoctor/wind_speed201608/data/41004h2011.csv')
wind.xts<-xts(wind[,'WSPD'],timeDate(wind[,1]))
org.data.xts<-wind.xts['2011-01-01/2011-11-30']
wind_month.xts<-ts(org.data.xts)
a <- psf(data = wind_month.xts, n.ahead = 24)
test_idx <- c(length(price.xts)-24+1 : length(price.xts))[c(F,T)]
print(test_idx)
hour_odd <- c(1:length(price.xts)-24)[c(F,T)]
length(hour_odd)
test_idx <- c(length(price.xts)-length(hour_odd)+1 : length(price.xts))[c(F,T)]
print(test_idx)
test_idx <- c(length(hour_odd)+1 : length(price.xts))[c(F,T)]
print(test_idx)
price<-read.csv('/Users/junjie/Desktop/FirstYearDoctor/wind_speed201608/cluster/Rscipt/DATA200601_QLD1.csv')
price.xts<-xts(price[,'RRP'],timeDate(price[,2]))
price.xts<-ts(price.xts)
hour_odd <- c(1:length(price.xts)-24)[c(F,T)]
test_idx <- c(length(hour_odd)+1 : length(price.xts))[c(F,T)]
length(test_idx)
length(hour_odd)
hour_odd <- c(1:length(price.xts))[c(F,T)]
length(hour_odd)
hour_odd <- c(1:(length(price.xts)-24)[c(F,T)]
)
hour_odd <- c(1:(length(price.xts)-24))[c(F,T)]
length(hour_odd)
test_idx <- c( (length(hour_odd)+1) : length(price.xts))[c(F,T)]
length(test_idx)
length(price.xts)
hour_odd <- c(1:(length(price.xts)))[c(F,T)]
price.xts<-price.xts[hour_odd]
length(price.xts)
train_idx <- c(1:(length(price.xts)-24))[c(F,T)]
test_idx <- c( (length(train_idx)+1) : length(price.xts))[c(F,T)]
train_idx <- c(1:(length(price.xts)-24))
test_idx <- c( (length(train_idx)+1) : length(price.xts))
a <- psf(data = price.xts[train_idx], n.ahead = 24)
psf_plot(data = price.xts[train_idx], predictions = a$predictions)
error<-sqrt(mean((price.xts[test_idx] - a)^2))
error<-sqrt(mean((price.xts[test_idx] - a$predictions)^2))
print(error)
test_idx<-wind.xts['2011-11-29/2011-11-30']
View(test_idx)
View(test_idx)
test_data<-ts(wind.xts['2011-11-29/2011-11-30'])
length(test_data)
View(test_idx)
test_data<-ts(wind.xts['2011-11-30/2011-11-30'])
length(test_data)
org.data.xts<-wind.xts['2011-01-01/2011-11-29']
length(org.data.xts)
7966/24
7966/23
View(org.data.xts)
wind<-read.csv('/Users/junjie/Desktop/FirstYearDoctor/wind_speed201608/data/41004h2011.csv')
wind.xts<-xts(wind[,'WSPD'],timeDate(wind[,1]))
org.data.xts<-wind.xts['2011-01-01/2011-11-29']
wind_month.xts<-ts(org.data.xts)
test_data<-ts(wind.xts['2011-11-30/2011-11-30'])
a <- psf(data = wind_month.xts, n.ahead = 24)
a$predictions
test_data
test_data<-ts(wind.xts['2011-11-30/2011-11-30'])
error<-sqrt(mean((test_data - a$predictions)^2))
error<-sqrt(mean((test_data - a$predictions[1:23])^2))
error
test_data
plot(test_data)
plot(a$predictions)
a$predictions
view(a$predictions)
View(a$predictions)
series<-price.xts[train_idx]
data <- price.xts[train_idx]
dmin = series[, min(data)];
convert_datatype()
library(PSF)
convert_datatype()
x <- sample(1:7, 100, replace = TRUE)
require(xts)
require(timeDate)
library(PSF)
wind<-read.csv('/Users/junjie/Desktop/FirstYearDoctor/wind_speed201608/data/41004h2011.csv')
wind.xts<-xts(wind[,'WSPD'],timeDate(wind[,1]))
org.data.xts<-wind.xts['2011-01-01/2011-11-29']
wind_month.xts<-ts(org.data.xts)
test_data<-ts(wind.xts['2011-11-30/2011-11-30'])
a <- psf(data = wind_month.xts, n.ahead = 24)
psf_plot(data = wind_month.xts, predictions = a$predictions)
error<-sqrt(mean((test_data - a$predictions[1:23])^2))
error
install.packages('forecast')
library('forecast')
b <- forecast(auto.arima(wind_month.xts), 24)$mean
b
ARIMAi <- sqrt(mean((y - b[1:23])^2))
ARIMAi <- sqrt(mean((test_data - b[1:23])^2))
ARIMAi
c <- as.numeric(forecast(ets(wind_month.xts), 24)$mean)
c
#   year = {2014},
# 10) scale
data.xts<-my_scale_ts(org.data.xts,c(0,1))$scaled
# 20) split
tmp<-my_vector_split(data.xts,HORIZON=HORIZON,LAG=LAG,RATIO=RATIO)
trn<-tmp$trn
install.packages('RSNNS')
install.packages('EMD')
install.packages('MASS')
install.packages('xts')
install.packages('timeDate')
imf.ada.predict<-imf.ann.predict<-array(NA,dim=c(nrow(tst$labels),ncol(tst$labels),nimf+1))
source('~/Downloads/2014-CIEL/CIEL2014/emd_adaboost_nn_CIEL2014.R')
source('~/Downloads/2014-CIEL/CIEL2014/emd_adaboost_nn_CIEL2014.R', echo=TRUE)
require(RSNNS)
require(MASS)
require(xts)
require(timeDate)
require(forecast)
require(EMD)
# source user defined functions
source('../AdaBoost/adaboost_fn.R')
source('../misc/pre_processing_fn.R')
source('../misc/post_processing_fn.R')
source('../misc/cross_validation_fn.R')
source('../Method/mlp_fn.R')
source('~/Downloads/2014-CIEL/CIEL2014/emd_adaboost_nn_CIEL2014.R', echo=TRUE)
require(RSNNS)
require(MASS)
require(xts)
require(timeDate)
require(forecast)
require(EMD)
# source user defined functions
source('../AdaBoost/adaboost_fn.R')
source('../misc/pre_processing_fn.R')
source('../misc/post_processing_fn.R')
source('../misc/cross_validation_fn.R')
source('../Method/mlp_fn.R')
source('../AdaBoost/adaboost_fn.R')
source('../misc/pre_processing_fn.R')
require(RSNNS)
require(MASS)
require(xts)
require(timeDate)
require(forecast)
require(EMD)
source('../AdaBoost/adaboost_fn.R')
wind<-read.csv('41004h2011.csv')
wind.xts<-xts(wind[,'WSPD'],timeDate(wind[,1]))
org.data.xts<-wind.xts['2011-01-01/2011-01-31']
wind<-read.csv('41004h2011.csv')
devtools::install_github("asardaes/dtwclust")
is.vector(price.xts)
View(price.xts)
series <- as.data.frame.table(price.xts)
series = as.data.table(price.xts)
require(xts)
series = as.data.table(price.xts)
library(PSF)
series = as.data.table(price.xts)
series = data.table(price.xts)
convert_datatype(price.xts)
source('convert_datatype.R')
convert_datatype(price.xts)
source('~/convert_datatype.R')
source('/Users/junjie/convert_datatype.R')
setwd('/Users/junjie')
source('convert_datatype.R')
source('covert_datatype.R')
series <- convert_datatype(price.xts)
require(xts)
require(timeDate)
series <- convert_datatype(price.xts)
library(PSF)
series <- convert_datatype(price.xts)
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
series <- convert_datatype(price.xts)
View(series)
View(series)
dmin = series[, min(data)]; dmax = series[, max(data)]
series[, data := (data - dmin) / (dmax - dmin)]
View(series)
install.packages("dtwclust")
install.packages("dtwclust")
devtools::install_github("asardaes/dtwclust")
load("~/Desktop/predictPrice/R/kshape1.RData")
View(mae1)
View(rmse1)
mae1[2:]
mae1[2,:]
mae1[2,]
mae1[2:20,]
mae1[2:20,2:20]
which.min(mae1[2:20,2:20])
mae1[75]
View(mae1)
which.min(rmse1[2:20,2:20])
rmse1[172]
source('~/Desktop/predictPrice/R/compare.R', echo=TRUE)
mae_kmeans<-mae(ts(d.test)- a$predictions)
rmse_kmeans<-rmse(ts(d.test)- a$predictions)
mae_kmeans
rmse_kmeans
install.packages("ISLR")
}
source('~/Rscript/plotcontour.R', echo=TRUE)
install.packages("LearnBayes")
source('~/Rscript/plotcontour.R', echo=TRUE)
install.packages("Rmosek")
install.packages("Matrix")
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/8")
require(Rmosek)
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/6")
install.packages("Rmosek_1.2.3.tar.gz", type = "source", libs_only = FALSE, repos = NULL,
configure.vars="PKG_MOSEKHOME=/usr/local/mosek/6/tools/platform/osx64x86
PKG_MOSEKLIB=mosek64")
install.packages("Rmosek", type = "source", libs_only = FALSE, repos = NULL,
configure.vars="PKG_MOSEKHOME=/usr/local/mosek/6/tools/platform/osx64x86
PKG_MOSEKLIB=mosek64")
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/6",configure.vars="PKG_MOSEKHOME=/usr/local/mosek/6/tools/platform/osx64x86
+                  PKG_MOSEKLIB=mosek64")
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/6",configure.vars="PKG_MOSEKHOME=/usr/local/mosek/6/tools/platform/osx64x86PKG_MOSEKLIB=mosek64")
DGP <- function(mu = c(-6,0,6), n = 1000, N = 100, vmu = 2){
histo <- function(y, x)
hist(y, x, plot = FALSE)$density
x <- seq(-15, 15, len = 101)
U <- matrix(runif(3 * N), N, 3)
Y <- matrix(0, n, N)
for(i in 1:N)
Y[,i] <- sample(mu, n, prob = U[i,], replace = TRUE) +
rnorm(1, sd = sqrt(2)) + rnorm(n)
H <- apply(Y, 2, histo, x = x)
H <- H/apply(H,2,sum)
xm <- (x[-1] + x[-length(x)])/2
M <- abs(outer(xm, xm, "-"))
M <- M/median(M)
list(x = x, H = H, M = M)
}
D <- DGP(N = 2)
x <- D$x
H <- D$H
View(H)
par(mfrow = c(1,3))
for(i in 1:2){
main <- paste("Histogram", i)
plot(stepfun(x[-c(1,100)], H[,i]), main = main, do.points = FALSE)
}
n <- nrow(D$H)
f <- c(D$M)
one <- matrix(1, 1, n)
A <- rbind(kronecker(one, Diagonal(n)),kronecker(Diagonal(n), one))
b <- c(D$H)
Aq <- NA
bq <- NA
lb <- rep(0, n^2)
ub <- rep(Inf, n^2)
require(Matrix)
A <- rbind(kronecker(one, Diagonal(n)),kronecker(Diagonal(n), one))
b <- c(D$H)
Aq <- NA
bq <- NA
lb <- rep(0, n^2)
ub <- rep(Inf, n^2)
P <- mosek_lptoprob(f,Aq,bq,A,b,lb,ub)
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/6",configure.vars="PKG_MOSEKHOME=/usr/local/mosek/6/tools/platform/osx64x86,PKG_MOSELIB=mosek64")
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/6",configure.vars="PKG_MOSEKHOME=/usr/local/mosek/6/tools/platform/osx64x86,PKG_MOSEKLIB=mosek64")
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/6",configure.vars="PKG_MOSEKHOME=/usr/local/mosek/6/tools/platform/osx64x86")
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/6",configure.vars="PKG_MOSEKHOME=/usr/local/mosek/6/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/6",configure.vars="PKG_MOSEKHOME=/usr/local/mosek/6/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/8",configure.vars="PKG_MOSEKHOME=/Users/junjie/Downloads/mosek/8/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
require(Rmosek)
P <- mosek_lptoprob(f,Aq,bq,A,b,lb,ub)
r <- mosek(P, opts = list(verbose = 0))
r <- mosek(P, opts = list(verbose = 0))
X <- matrix(r$sol$itr$xx,n,n) * 1000
install.packages("Rmosek", type="source", repos="/Users/junjie/Downloads/Rmosek",configure.vars="PKG_MOSEKHOME=/Users/junjie/Downloads/mosek/8/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
install.packages("Rmosek", type = "source", repos = "/Users/junjie/Downloads/Rmosek",
install.packages("Rmosek", type="source", repos="/Users/junjie/Downloads/Rmosek",configure.vars="PKG_MOSEKHOME=/Users/junjie/Downloads/mosek/8/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
install.packages("/Users/junjie/Downloads/Rmosek.zip", type="source", repos=NULL,configure.vars="PKG_MOSEKHOME=/Users/junjie/Downloads/mosek/8/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
install.packages("/Users/junjie/Downloads/Rmosek.zip", type="source", repos=NULL,configure.vars="PKG_MOSEKHOME=/Users/junjie/Downloads/mosek/8/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/7",configure.vars="PKG_MOSEKHOME=/Users/junjie/Downloads/mosek/8/tools/platform/osx64x86 PKG_MOSEKLIB=mosek64")
library("CoupledCPF", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
rm(list = ls())
library(CoupledPF)
library(doRNG)
library(ggthemes)
ncores <- 8
registerDoMC(cores = ncores)
setmytheme()
# fix the random seed
set.seed(17)
dimension <- 1
ar <- get_ar(dimension)
load(paste0("ar", dimension, "data.RData"))
datalength <- 100
alpha_star <- 0.95
A_star <- create_A(alpha_star, dimension)
datalength <- 100
observations <- matrix(nrow = datalength, ncol = dimension)
x_t <- fast_rmvnorm(1, rep(0, dimension), diag(1, nrow = dimension, ncol = dimension))
for (time in 1:datalength){
x_t <- t(A_star %*% t(x_t)) + fast_rmvnorm(1, rep(0, dimension), diag(1, nrow = dimension, ncol = dimension))
observations[time,] <- x_t + fast_rmvnorm(1, rep(0, dimension), diag(1, nrow = dimension, ncol = dimension))
}
nparticles <- 2^7 # For d = 1, T = 100
# number of experiments
nrep <- 5
# number of parameter values
nrhos <- 20
# grid of parameter values at which to estimate the log-likelihood
rhos <- seq(from = 0.3, to = 0.4, length.out = nrhos)
# estimate the log-likelihood using independent bootstrap particle filters
pfll <- foreach (irep = 1:nrep, .combine = cbind) %dorng% {
pf <- rep(0, nrhos)
for (irho in 1:nrhos){
theta <- rhos[irho]
randomness <- ar$generate_randomness(nparticles = nparticles, datalength = datalength)
ll <- particle_filter_storeall(nparticles, ar, theta, observations, randomness)$ll
pf[irho] <- ll
}
pf
}
# evaluate the log-likelihood exactly using the Kalman filter
kfll <- foreach(rho = rhos, .combine = rbind) %dopar% {
kalman_module <- Module( "kalman_mod", PACKAGE = "CoupledPF")
LGModel <- new(kalman_module$LinearGaussian)
LGModel$set_multivariate_parameters(rho, dimension)
LGModel$set_observations(observations)
Kalman <- new(kalman_module$Kalman)
Kalman$setLinearGaussian(LGModel)
Kalman$filtering()
data.frame(rhos = rho, ll = Kalman$getLL())
}
# estimate the log-likelihood with coupled particle filters
# with index-coupled resampling, here called index-matching.
resampling_scheme <- CR_indexmatching_given
resampling_parameters <- list()
indexll <- foreach (irep = 1:nrep, .combine = cbind) %dorng% {
theta <- rhos[1]
pf <- rep(0, nrhos)
randomness <- ar$generate_randomness(nparticles = nparticles, datalength = datalength)
particle_system <- particle_filter_storeall(nparticles, ar, theta, observations, randomness)
pf[1] <- particle_system$ll
for (irho in 2:nrhos){
theta <- rhos[irho]
particle_system <- coupled_pf_given(nparticles, ar, theta, observations, randomness,
resampling_scheme, resampling_parameters, particle_system)
pf[irho] <- particle_system$ll
}
pf
}
# now pool the results together for plotting
pfll.melt <- melt(cbind(rhos, data.frame(pfll)), id.vars = "rhos")
names(pfll.melt) <- c("rhos", "rep", "value")
pfll.melt$method <- "indep."
index.melt <- melt(cbind(rhos, data.frame(indexll)), id.vars = "rhos")
names(index.melt) <- c("rhos", "rep", "value")
index.melt$method <- "index"
all.melt <- rbind(pfll.melt, index.melt)
all.melt$method <- factor(all.melt$method, levels = c("indep.", "index"),
labels = c("independent", "CRN+index-coupled"))
# plotting
g <- ggplot(all.melt, aes(x = rhos, y = value, group = interaction(rep, method), colour = rep)) + geom_line() + geom_point()
g <- g + theme(legend.position = "none") + facet_wrap(~ method)
g <- g + scale_color_colorblind()
g <- g + xlab(expression(theta)) + ylab("log-likelihood")
g <- g + scale_x_continuous(breaks = c(0.3, 0.35, 0.4))
g <- g + geom_line(data = kfll, aes(x = rhos, y = ll, group = NULL, colour = NULL), colour = "red", size = 2)
g
rm(list = ls())
setwd("~/GitHub/CoupledPF/rscript/")
setwd("~/GitHub/CoupledPF/rscript/")
source('~/GitHub/CoupledPF/rscript/produceData.R', echo=TRUE)
load("~/GitHub/CoupledPF/rscript/.RData")
source('~/GitHub/CoupledPF/rscript/produceData.R', echo=TRUE)
source('~/GitHub/CoupledPF/rscript/produceData.R')
source('~/GitHub/CoupledPF/rscript/produceData.R')
source('~/GitHub/CoupledPF/rscript/produceData.R')
nparticles <- 2^7 # For d = 1, T = 100
# number of experiments
nrep <- 5
# number of parameter values
nrhos <- 20
# grid of parameter values at which to estimate the log-likelihood
rhos <- seq(from = 0.3, to = 0.4, length.out = nrhos)
# estimate the log-likelihood using independent bootstrap particle filters
pfll <- foreach (irep = 1:nrep, .combine = cbind) %dorng% {
pf <- rep(0, nrhos)
for (irho in 1:nrhos){
theta <- rhos[irho]
randomness <- ar$generate_randomness(nparticles = nparticles, datalength = datalength)
ll <- particle_filter_storeall(nparticles, ar, theta, observations, randomness)$ll
pf[irho] <- ll
}
pf
}
load("~/GitHub/CoupledPF/rscript/.RData")
# plotting
g <- ggplot(all.melt, aes(x = rhos, y = value, group = interaction(rep, method), colour = rep)) + geom_line() + geom_point()
g <- g + theme(legend.position = "none") + facet_wrap(~ method)
g <- g + scale_color_colorblind()
g <- g + xlab(expression(theta)) + ylab("log-likelihood")
g <- g + scale_x_continuous(breaks = c(0.3, 0.35, 0.4))
g <- g + geom_line(data = kfll, aes(x = rhos, y = ll, group = NULL, colour = NULL), colour = "red", size = 2)
g
# ta-daaaah!
